서버에서 처리하는 프로세스,
무상태 과거를 기억함.

쿠키 주고 받는 시나리오
1) 브라우저에서 최초로 서버에 호출하면, 서버에서 발행한 쿠키를 체크를 함.
없으면, 아무것도 전송하지 않는다.
2) 서버에서는 응답 메세지를 보낼 때, 브라우저에게 쿠키를 보내주고,
Set-Cookie (HTTP헤더) 이용함.
3) 브라우저는 쿠키를 받은 후에 정보를 보고, 파일 형태로 보관할지?
아니면, 메모리상에 보관할지? 유효기간을 보고 판단.
만약, 특정의 기간이 있다면, 파일로 보관, 기간이 없다면, 메모리 상에 보관.
4) 브라우저 입장에서는 보관하는 쿠키가 헤더에 Cookie라는 헤더 이름으로 전달을 받고,
해당 경로에 저장,
최초로 받게 되면, 경로, / 를 지정함.
5) 서버는 필요에 따라서, 브라우저에서 전달 된 쿠키를 이용함.

세션
서버에서 저장하는 임시 메모리.(0x100 스토리)
톰캣 서버(WAS(Web application Server)= 웹서버 + jsp 컨테이너 )
- extend HttpServletRequest ,
- 부모의 클래스 중에서, 세션의 정보를 가져오는 기능,
getSession()

- 세션을 이용해서, 로그인 체크 기능 확인해보기.
1) 사용자 로그인 성공시 -> HttpSession 에 임시 저장공간에 할당. -> 리스트로 가기.
2) 실패시 -> 로그인 폼.

기본문법.
세터,
 HttpSession session = req.getSession();
    //세션의 정보를 저장.문자열의 형태.
    session.setAttribute("loginInfo",result);

게터,
HttpSession session = req.getSession();
session.getAttribute("loginInfo") 의 반환 값, Object 라서, 다운 캐스팅 필요함.
    String loginInfoSession = (String) session.getAttribute("loginInfo");


웹서버, 무상태(무언가 저장 안함),
(클라이어트, 서버) 한세트
(요청, 응답) 한세트,

웹, 임시로 저장할 일이 발생함.
1) 장기적으로 저장할 데이터, 디비 서버 보관,
2) 사이트 , 로그인, 로그인 정보를 임시로 저장할 공간. -> 서버의 임시 메모리에 저장. -> 세션
초반에는, SSR(Server Side Rendering) -> 대용량
-> CSR(리액트, 뷰, API 서버(화면 안그리고, 데이터만 전달.)
단점, 휘발성, 서버의 자원을 계속 이용해요.
3) 특정 사이트 에 접속 했을 때, 쿠키 정보 허용 해도 되냐고 ?
정보가 노출이 되어도, 상관없는 임시 데이터,
쇼핑몰에서


EL 표기법으로 , 화면에서, 서버로 부터 넘어온 데이터 조회하는 과정.
 데이터를 검색하는 범위
1) page Scope : JSP에서 EL을 이용시 <c:set> 지정한 변수를 검색.
검색시 없다면, 다음 단계로 찾으러 가기.

2) Request Scope : HttpServletRequest , setAttribute() 를 저장한 변수를 검색.
검색시 없다면, 다음 단계로 찾으러 가기.

3) Session Scope : HttpSession을 이용해서, setAttribute() 이용해서 저장한 변수를 검색.
검색시 없다면, 다음 단계로 찾으러 가기.
예시) , 로그인 후, 세션에, 키: loginInfo , 값 : MemberDTO

4) Application Scope : ServletContext 에서, setAttribute()이용해서 저장한 변수를 검색.
마지막, 여기 없으면, 진짜 없다.





참고,
OSI 7계층.
물리,데이터링크,네트워크,전송,세션,표현,응용

쿠키
문자열 형태로, key, value 의 형태로 데이터를 저장.
클라이언트 저장하는 파일.

쿠키를 생성하는 방법,
1) 서버에서 자동으로 생성하는 쿠키 :
키: JSSESSIONID 이름으로, 값 : F994A31D7351DDE3862876D0B64C7040
경로 : /

2) 개발자가 임의로 생성하는 쿠키 :
- 이름도 자유롭게 정함.
- 유효기간도 임의로 저장 가능, -> 자동로그인,
- 생성하면, 반드시 Response 객체에 담아서, 브라우저에 전달해야함.
- 경로, 도메인을 지정가능.

생성/전송 ,
비교,
시스템이 제공해주는 쿠기
-  키명 :JSESSIONID, 값: 랜덤한 문자열로 구성. 톰캣서버에 최초로 접근시 발행해주는 값.
- 유효기간 지정.
- 메모리상에 보관,
- 4kb
vs
사용자가 정의한 쿠키.
- 개발자가 직접 정의 가능.
- 파일로 보관,
- 유효기관을 명시,
- 쿠키 만들고, 전송해야함.
- 4kb

주의사항, 문자열 타입으로 저장,.
쿠키에 내용에 값을 저장 할때, 한글 문제가되어서, URLEncoding, URLDecoding.
test -> encoding -> 1234@@ , 인코딩
test <- decoding <- 1234@@ , 디코딩

-이용해서, 최근 조회한 상품의 내용 쿠키에 저장. .
-이용해서, 최근 조회한 Todo의 내용 쿠키에 저장.

-처리하는 전략, 예) 세션, (Session, Server
1) 쿠키(Cookie)는 ,클라이언트에서 파일 형식으로 저장.
2) 1-3-7, TodoVO의 tno 번호로 기록을 해보자.
3) 쿠키의 이름 : 키, 값의 구조,  키: viewTodos, 값 : "1-4-7"
4) 유효기간은 임시로 24시간,
5)
문법.
쿠키 설정, 세터
// 쿠키의 값을 설정, setter
        viewTodoCookie.setValue(todoListResult);
        // 쿠키 의 생존 주기, 하루.
        viewTodoCookie.setMaxAge(60 * 60 * 24);
        // 해당 쿠기의 적용 범위. /todo/list
        viewTodoCookie.setPath("/");

쿠키 전달,
 // 응답 객체에 담아서, 전송.
        resp.addCookie(viewTodoCookie);

쿠키 값 가져오기
private Cookie findCookie(Cookie[] cookies, String cookieName) {
    // 찾은 쿠키를 담을 임시 쿠기.
    Cookie targetCookie = null;

    if(cookies != null && cookies.length >0) {
      for(Cookie cookie : cookies) {
        if(cookie.getName().equals(cookieName)){
          targetCookie = cookie;
          break;
        }
      }
    } // if 조건문

    if(targetCookie == null) {
      targetCookie = new Cookie(cookieName,"");
      targetCookie.setPath("/");
      targetCookie.setMaxAge(60*60*24);

    }
    return targetCookie;
  } // findCookie 닫는 부분


필터
반드시 거쳐감,
시나리오, todo 접근시, 항상 로그인을 체크 하는 필터 만들기.


리스너
각 공간의 임시 저장소,